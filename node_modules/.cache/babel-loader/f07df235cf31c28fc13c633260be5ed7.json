{"ast":null,"code":"var _jsxFileName = \"/home/am-pc-61/jotiba/to-do-list-adv/src/components/TaskBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./TaskBoard.css\";\nimport Card from \"./Card\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TaskBoard(props) {\n  _s();\n\n  const [count, setCount] = useState(0);\n  const [list, setList] = useState(props.value);\n  const [dragging, setDragging] = useState(false);\n  useEffect(() => {\n    setList(props.value);\n  }, [setList, props.value]);\n  const dragItem = useRef();\n  const dragItemNode = useRef();\n\n  const handletDragStart = (e, item) => {\n    console.log('Starting to drag', item);\n    dragItemNode.current = e.target;\n    dragItemNode.current.addEventListener('dragend', handleDragEnd);\n    dragItem.current = item;\n    setTimeout(() => {\n      setDragging(true);\n    }, 0);\n  };\n\n  const handleDragEnter = (e, targetItem) => {\n    console.log('Entering a drag target', targetItem);\n\n    if (dragItemNode.current !== e.target) {\n      console.log('Target is NOT the same as dragged item');\n      setList(oldList => {\n        let newList = JSON.parse(JSON.stringify(oldList));\n        newList[targetItem.grpI].items.splice(targetItem.itemI, 0, newList[dragItem.current.grpI].items.splice(dragItem.current.itemI, 1)[0]);\n        dragItem.current = targetItem;\n        localStorage.setItem('List', JSON.stringify(newList));\n        return newList;\n      });\n    }\n  };\n\n  const handleDragEnd = e => {\n    setDragging(false);\n    dragItem.current = null;\n    dragItemNode.current.removeEventListener('dragend', handleDragEnd);\n    dragItemNode.current = null;\n  };\n\n  const getStyles = item => {\n    if (dragItem.current.grpI === item.grpI && dragItem.current.itemI === item.itemI) {\n      return \"dnd-item current\";\n    }\n\n    return \"dnd-item\";\n  };\n\n  const Navigate = useNavigate();\n  const item = props.data;\n\n  const checkbox = (d, id) => {\n    console.log(d.target.checked);\n\n    if (d.target.checked) {\n      setCount(count + 1);\n      const dataM = item.filter(data => data.id !== id);\n      props.setData(dataM);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taskNav\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"taskLogo.png\",\n        alt: \"task-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Task Board \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        value: \"Add Task\",\n        onClick: () => Navigate(\"/add/id\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), list ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drag-n-drop\",\n      children: list.map((grp, grpI) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onDragEnter: dragging && !grp.items.length ? e => handleDragEnter(e, {\n          grpI,\n          itemI: 0\n        }) : null,\n        className: \"dnd-group\",\n        children: grp.items.map((item, itemI) => /*#__PURE__*/_jsxDEV(\"div\", {\n          draggable: true,\n          onDragStart: e => handletDragStart(e, {\n            grpI,\n            itemI\n          }),\n          onDragEnter: dragging ? e => {\n            handleDragEnter(e, {\n              grpI,\n              itemI\n            });\n          } : null,\n          className: dragging ? getStyles({\n            grpI,\n            itemI\n          }) : \"dnd-item\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            value: index,\n            setData: props.setData,\n            ...props,\n            fun: checkbox,\n            setTogal: props.setTogal\n          }, index.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }, this)\n        }, item, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 19\n        }, this))\n      }, grp.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this) : null // item.map((index) => {\n    //   return (\n    //     <Card\n    //       key={index.id}\n    //       value={index}\n    //       setData={props.setData}\n    //       {...props}\n    //       fun={checkbox}\n    //       setTogal={props.setTogal}\n    //     />\n    //   );\n    // })\n    , /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropup\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"dropbtn count-btn\",\n          children: [\"Completed(\", count, \")\\u25B2\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropup-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"count\",\n            style: {\n              display: \"flex\",\n              padding: \"20px\"\n            },\n            onClick: () => setCount(0),\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Clear All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"delete.png\",\n              alt: \"delet\",\n              className: \"count-del\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskBoard, \"Zv/r1PDK8tFqHwsT4FRM9r28XEc=\", false, function () {\n  return [useNavigate];\n});\n\n_c = TaskBoard;\nexport default TaskBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskBoard\");","map":{"version":3,"sources":["/home/am-pc-61/jotiba/to-do-list-adv/src/components/TaskBoard.js"],"names":["React","useState","useEffect","useRef","Card","useNavigate","TaskBoard","props","count","setCount","list","setList","value","dragging","setDragging","dragItem","dragItemNode","handletDragStart","e","item","console","log","current","target","addEventListener","handleDragEnd","setTimeout","handleDragEnter","targetItem","oldList","newList","JSON","parse","stringify","grpI","items","splice","itemI","localStorage","setItem","removeEventListener","getStyles","Navigate","data","checkbox","d","id","checked","dataM","filter","setData","map","grp","length","index","setTogal","title","display","padding"],"mappings":"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","sourcesContent":["import React, { useState,useEffect,useRef } from \"react\";\nimport \"./TaskBoard.css\";\nimport Card from \"./Card\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction TaskBoard(props) {\n  const [count, setCount] = useState(0);\n  const [list, setList] = useState(props.value);\n  const [dragging, setDragging] = useState(false);\n\n  useEffect(() => {\n    setList(props.value);\n  }, [setList, props.value]);\n\n  const dragItem = useRef();\n  const dragItemNode = useRef();\n\n\n  const handletDragStart = (e, item) => {\n    console.log('Starting to drag', item)\n\n    dragItemNode.current = e.target;\n    dragItemNode.current.addEventListener('dragend', handleDragEnd)\n    dragItem.current = item;\n\n    setTimeout(() => {\n        setDragging(true); \n    },0)       \n}\nconst handleDragEnter = (e, targetItem) => {\n    console.log('Entering a drag target', targetItem)\n    if (dragItemNode.current !== e.target) {\n        console.log('Target is NOT the same as dragged item')\n        setList(oldList => {\n            let newList = JSON.parse(JSON.stringify(oldList))\n            newList[targetItem.grpI].items.splice(targetItem.itemI, 0, newList[dragItem.current.grpI].items.splice(dragItem.current.itemI,1)[0])\n            dragItem.current = targetItem;\n            localStorage.setItem('List', JSON.stringify(newList));\n            return newList\n        })\n    }\n}\nconst handleDragEnd = (e) => {\n    setDragging(false);\n    dragItem.current = null;\n    dragItemNode.current.removeEventListener('dragend', handleDragEnd)\n    dragItemNode.current = null;\n}\nconst getStyles = (item) => {\n    if (dragItem.current.grpI === item.grpI && dragItem.current.itemI === item.itemI) {\n        return \"dnd-item current\"\n    }\n    return \"dnd-item\"\n}\n\n  const Navigate = useNavigate();\n  const item = props.data;\n  const checkbox = (d, id) => {\n    console.log(d.target.checked);\n    if (d.target.checked) {\n      setCount(count + 1);\n      const dataM = item.filter((data) => data.id !== id);\n      props.setData(dataM);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"taskNav\">\n        <img src=\"taskLogo.png\" alt=\"task-logo\" />\n        <h1>Task Board </h1>\n        <input\n          type=\"button\"\n          value=\"Add Task\"\n          onClick={() => Navigate(\"/add/id\")}\n        />\n      </div>\n\n      {\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      list?\n        (                \n            <div className=\"drag-n-drop\">\n            {list.map((grp, grpI) => (\n              <div key={grp.title} onDragEnter={dragging && !grp.items.length?(e) => handleDragEnter(e,{grpI, itemI: 0}):null} className=\"dnd-group\">\n                {grp.items.map((item, itemI) => (\n                  <div draggable key={item}  onDragStart={(e) => handletDragStart(e, {grpI, itemI})} onDragEnter={dragging?(e) => {handleDragEnter(e, {grpI, itemI})}:null} className={dragging?getStyles({grpI, itemI}):\"dnd-item\"}>\n                    <Card\n            key={index.id}\n            value={index}\n            setData={props.setData}\n            {...props}\n            fun={checkbox}\n            setTogal={props.setTogal}\n          />\n                  </div>\n                ))}\n              </div>\n            ))}\n            </div>\n        )\n    :null\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      // item.map((index) => {\n      //   return (\n      //     <Card\n      //       key={index.id}\n      //       value={index}\n      //       setData={props.setData}\n      //       {...props}\n      //       fun={checkbox}\n      //       setTogal={props.setTogal}\n      //     />\n      //   );\n      // })\n      }\n\n      <div className=\"bottom\">\n        <div className=\"dropup\">\n          <button className=\"dropbtn count-btn\">Completed({count})▲</button>\n          <div className=\"dropup-content\">\n            <div\n              className=\"count\"\n              style={{ display: \"flex\", padding: \"20px\" }}\n              onClick={() => setCount(0)}\n            >\n              <p>Clear All</p>\n              <img src=\"delete.png\" alt=\"delet\" className=\"count-del\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TaskBoard;\n"]},"metadata":{},"sourceType":"module"}